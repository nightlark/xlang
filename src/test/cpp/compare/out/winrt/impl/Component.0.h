// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.000000.0
#pragma once
#include "winrt/base.h"
namespace winrt::Component
{
    enum class Signed : int32_t
    {
        First = -1,
        Second = 0,
        Third = 1,
    };
    enum class Unsigned : uint32_t
    {
        First = 0,
        Second = 0x1,
        Third = 0x2,
    };
    struct INotExclusive;
}
namespace winrt::impl
{
    template<> struct is_enum_flag<Component::Unsigned> : std::true_type
    {
    };
    template <> struct category<Component::INotExclusive>
    {
        using type = interface_category;
    };
    template <> struct category<Component::Signed>
    {
        using type = enum_category;
    };
    template <> struct category<Component::Unsigned>
    {
        using type = enum_category;
    };
    template <> struct name<Component::INotExclusive>
    {
        static constexpr auto & value{ L"Component.INotExclusive" };
    };
    template <> struct name<Component::Signed>
    {
        static constexpr auto & value{ L"Component.Signed" };
    };
    template <> struct name<Component::Unsigned>
    {
        static constexpr auto & value{ L"Component.Unsigned" };
    };
    template <> struct guid_storage<Component::INotExclusive>
    {
        static constexpr guid value{ 0x0B81641F,0x1BE2,0x5D38,{ 0x82,0x47,0x6C,0xEE,0x1E,0xB4,0x9E,0xBD } };
    };
    template <> struct abi<Component::INotExclusive>
    {
        struct type : inspectable_abi
        {
            virtual int32_t WINRT_CALL NotExclusive(void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Component_INotExclusive
    {
        hstring NotExclusive() const;
    };
    template <> struct consume<Component::INotExclusive>
    {
        template <typename D> using type = consume_Component_INotExclusive<D>;
    };
}
