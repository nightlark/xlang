// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.000000.0
#pragma once
#include "winrt/Component.h"
#include "winrt/Component.Fast.h"
namespace winrt::Component::Fast::implementation
{
    template <typename D, typename... I>
    struct WINRT_EBO FastClass_base : implements<D, fast_interface<Component::Fast::FastClass>, Component::INotExclusive, I...>
    {
        using base_type = FastClass_base;
        using class_type = Component::Fast::FastClass;
        using implements_type = typename FastClass_base::implements_type;
        using implements_type::implements_type;
        
        operator impl::producer_ref<class_type> const() const noexcept
        {
            return { to_abi<default_interface<class_type>>(this) };
        }

        hstring GetRuntimeClassName() const
        {
            return L"Component.Fast.FastClass";
        }
    };
}
namespace winrt::Component::Fast::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct WINRT_EBO FastClassT : implements<D, Windows::Foundation::IActivationFactory, Component::Fast::IFastClassStatics, I...>
    {
        using instance_type = Component::Fast::FastClass;

        hstring GetRuntimeClassName() const
        {
            return L"Component.Fast.FastClass";
        }
        Windows::Foundation::IInspectable ActivateInstance() const
        {
            return make<T>();
        }
        hstring StaticMethod()
        {
            return T::StaticMethod();
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_FASTCLASS_XAML_G_H) || __has_include("Component.Fast.FastClass.xaml.g.h")
#include "Component.Fast.FastClass.xaml.g.h"
#else

namespace winrt::Component::Fast::implementation
{
    template <typename D, typename... I>
    using FastClassT = FastClass_base<D, I...>;
}

#endif
